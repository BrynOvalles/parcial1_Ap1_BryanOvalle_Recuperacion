@page "/EditarMetas"
@page "/EditarMetas/{metaId:int}"
@rendermode InteractiveServer
@inject MetasServices metaServices;
@inject NavigationManager NavigationManager;

<PageTitle>Editar Metas</PageTitle>
<EditForm Model="metas" OnValidSubmit="Modificar">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header">
				<h3><strong>Editar Metas</strong></h3>
			</div>
			<div class="card-body">
				<label>MetaId:</label>
				<div class="col-6">
					<InputNumber @bind-Value="metas.MetaId" class="id-input" disabled readonly></InputNumber>
				</div>
				<div class='row'>
					<div class="col-4">
						<label>Descripci&oacute;n:</label>
						<InputText @bind-Value="metas.Descripcion" class="form-control input-group-sm"></InputText>
						<ValidationMessage For="@(() => metas.Descripcion)" />
					</div>
					<div class="col-4">
						<label>Monto:</label>
						<InputNumber @bind-Value="metas.Monto" class="form-control input-group-sm"></InputNumber>
						<ValidationMessage For="@(() => metas.Monto)" />
					</div>
				</div>
				<div class='row'>
					<div class="col-4">
						<label>Fecha:</label>
						<InputDate @bind-Value="metas.Fecha" class="form-control input-group-sm"></InputDate>
						<ValidationMessage For="@(() => metas.Fecha)" />
					</div>
				</div>

			</div>
			<div class="card-footer d-flex justify-content-center">
				<button type="submit" class="btn btn-outline-primary"><i class="bi bi-floppy-fill" /> Modificar</button>
				<button type="button" class="btn btn-outline-secondary" @onclick="VolverAtras"><i class="bi bi-arrow-return-left" /> Volver</button>
			</div>
		</div>
	</div>
	@Mensaje
</EditForm>

@code {
	[Parameter]
	public int metaId { get; set; }
	public Metas metas = new Metas();
	public string Mensaje { get; set; } = string.Empty;

	DateTime FechaHoy = DateTime.Now;

	protected override async Task OnInitializedAsync()
	{
		metas = await metaServices.Buscar(metaId);
	}

	public async Task Modificar()
	{
		if (!await Validar())
		{
		if (metas.Fecha < FechaHoy)
		{
			Mensaje = "Error, La fecha no puede ser menor a la fecha actual.";
			return;
		}
		var metaModificada = await metaServices.Crear(metas);
		if (metaModificada)
		{
			VolverAtras();
		}
		}
	}

	public async Task<bool> Validar()
	{
		var nombre = await metaServices.BuscarDescripcion(metas.Descripcion);

		if (nombre != null)
		{
			Mensaje = "Ya existe una Meta con esta Descripción.";
			return true;
		}
		return false;
	}

	void VolverAtras()
	{
		NavigationManager.NavigateTo("/Metas");
	}
}